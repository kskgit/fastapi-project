# =============================================================================
# API Layer Configuration
# =============================================================================
# Inherits common settings from root pyproject.toml
# Only layer-specific configurations are defined here

[project]
name = "api"
version = "0.1.0"
description = "API layer - HTTP endpoints, DTOs, web framework concerns"
requires-python = ">=3.12"
dependencies = [
    # API can depend on Domain and Services layers
    "domain @ file://../../domain",
    "services @ file://../../services",
    
    # Web framework dependencies
    "fastapi>=0.115.12",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.9.1",
    "uvicorn>=0.34.3",
]

# API layer mypy restrictions are configured in root pyproject.toml
# This layer has moderate settings with FastAPI-specific allowances
# API can import from domain and services, but NOT infrastructure directly

# =============================================================================
# API Layer Clean Architecture Enforcement
# =============================================================================
# API layer can use FastAPI, Pydantic for HTTP concerns
# Database access must go through dependency injection

# Enable TID251 rule for this layer
[tool.ruff.lint]
select = ["TID251"]  # banned-api (Clean Architecture enforcement)

[tool.ruff.lint.flake8-tidy-imports.banned-api]
# Layer dependencies - API cannot directly depend on Infrastructure layer
"app.clean.infrastructure" = { msg = "❌ API cannot directly import Infrastructure layer. Use dependency injection instead." }

# Database/ORM - NOT allowed in API layer (use dependency injection)
"sqlalchemy" = { msg = "❌ SQLAlchemy modules not allowed in API layer. Use dependency injection for repositories." }
"alembic" = { msg = "❌ Database migration tools not allowed in API layer." }
"asyncpg" = { msg = "❌ Database drivers not allowed in API layer." }
"psycopg2" = { msg = "❌ Database drivers not allowed in API layer." }

# HTTP clients - Should go through services layer
"httpx" = { msg = "❌ HTTP clients not allowed in API layer. Use services layer for external API calls." }
"requests" = { msg = "❌ HTTP clients not allowed in API layer. Use services layer for external API calls." }

# FastAPI and Pydantic are NOT listed here = implicitly allowed