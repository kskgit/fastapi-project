[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "fastapi-project"
version = "0.1.0"
description = "FastAPI Todo Management with Clean Architecture"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    # Root level dependencies
    "alembic>=1.16.1",
    "asyncpg>=0.30.0",
    "fastapi>=0.115.12",
    "psycopg2-binary>=2.9.10",
    "pydantic-settings>=2.9.1",
    "pydantic[email]>=2.11.7",
    "sqlalchemy>=2.0.41",
    "uvicorn>=0.34.3",
]


[tool.setuptools.packages.find]
include = ["app*"]
exclude = ["tests*"]

[dependency-groups]
dev = [
    "mypy>=1.16.0",
    "ruff>=0.11.13",
    "import-linter>=2.0.0",
]
test = [
    "pytest>=8.0.0",
    "pytest-mock>=3.12.0",
    "pytest-cov>=6.0.0",
]

[tool.ruff]
line-length = 88
target-version = "py312"
exclude = ["alembic/versions/*.py"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "B008",  # FastAPI uses function calls in defaults for dependency injection
    "B904",  # Within `except` clause, raise exceptions with `raise ... from err`
]


[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--disable-warnings",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
]

# =============================================================================
# Clean Architecture Import Restrictions
# =============================================================================
# Enforce layered architecture boundaries using import-linter

[tool.importlinter]
root_packages = ["app"]
include_external_packages = true

# Clean Architecture Layer Dependencies
[[tool.importlinter.contracts]]
name = "Clean Architecture Layers"
type = "layers"
layers = [
    "app.clean.api",
    "app.clean.composition",  # Composition Root layer (can access all)
    "app.clean.usecases", 
    "app.clean.infrastructure",
    "app.clean.domain"
]

# Domain layer restrictions (most restrictive)
[[tool.importlinter.contracts]]
name = "Domain Layer Purity"
type = "forbidden"
source_modules = ["app.clean.domain"]
forbidden_modules = [
    "fastapi",
    "pydantic",
    "sqlalchemy",
    "alembic",
    "asyncpg",
    "psycopg2", 
    "httpx",
    "requests",
    "app.clean.api",
    "app.clean.usecases", 
    "app.clean.infrastructure",
]

# Infrastructure layer restrictions
[[tool.importlinter.contracts]]
name = "Infrastructure Layer Restrictions"
type = "forbidden"
source_modules = ["app.clean.infrastructure"]
forbidden_modules = [
    "fastapi",               # No web framework knowledge
    "app.clean.api",         # No upward dependencies
    "app.clean.usecases",    # No upward dependencies
]

# UseCases layer restrictions - strictest layer for business logic
[[tool.importlinter.contracts]]
name = "UseCases Layer Restrictions"
type = "forbidden"
source_modules = ["app.clean.usecases"]
forbidden_modules = [
    "fastapi",                  # Pure business logic - no web framework
    "sqlalchemy",               # Use repository interfaces only
    "alembic",
    "asyncpg", 
    "psycopg2",
    "app.clean.infrastructure",  # Use repository interfaces only
    "app.clean.api",            # No upward dependencies
    "app.clean.composition",    # No upward dependencies
]

# Composition Root layer restrictions - can import all but no upward dependencies  
[[tool.importlinter.contracts]]
name = "Composition Root Layer Restrictions"
type = "forbidden"
source_modules = ["app.clean.composition"]
forbidden_modules = [
    "app.clean.api",            # No upward dependencies to API layer
]
